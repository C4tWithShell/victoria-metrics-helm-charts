---
weight: 2
title: VictoriaLogs Cluster
menu:
  docs:
    parent: helm
    weight: 2
    identifier: helm-victoria-logs-cluster
url: /helm/victoria-logs-cluster/
aliases:
  - /helm/victorialogs-cluster/
tags:
  - logs
  - kubernetes
---
{{ template "chart.badges" . }}

{{ template "chart.description" . }}

{{ template "chart.prerequisites" . }}

## Chart Details

### VictoriaLogs Cluster

The chart deploys VictoriaLogs cluster database. It deploys the following components according to [VictoriaLogs cluster architecture](https://docs.victoriametrics.com/victorialogs/cluster/#architecture):

- `vlstorage` stores the ingested logs the the configured persistent volumes
- `vlinsert` receives incoming log streams and spreads them evenly across `vlstorage` nodes
- `vlselect` provides API for querying the ingested logs

It is possible to deploy an optional log collector, which will automatically discover and collect
all the logs from all the containers in Kubernetes, and send them to the deployed VictoriaLogs database.
Set `vector.enabled: true` in the configs in order to enable the collector:

```yaml
vector:
  enabled: true
```

The default chart setup is shown below:

```mermaid
graph LR
    Vector["Log Collector"] --> VLI1["vlinsert-1"]
    Vector --> VLI2["vlinsert-2"]
    
    subgraph "VictoriaLogs Cluster"
        VLI1 --> VLS1["vlstorage-1"]
        VLI1 --> VLS2["vlstorage-2"]
        VLI2 --> VLS1
        VLI2 --> VLS2
        
        VLS1 <--> VLQ1["vlselect-1"]
        VLS1 <--> VLQ2["vlselect-2"]
        VLS2 <--> VLQ1
        VLS2 <--> VLQ2
    end
    
    VLQ1 <--> Users["Users/Grafana/vlogscli"]
    VLQ2 <--> Users
```

### vmauth

When you enable `vmauth` with:

```yaml
vmauth:
  enabled: true
```

The chart launches an [`vmauth`](https://docs.victoriametrics.com/victoriametrics/vmauth/) service
for proxying and load-balancing incoming data ingestion requests to `vlinsert` nodes and for proxying and load-balancing incoming queries to `vlselect` nodes.

The default Vector configuration bypasses `vmauth` and continues sending logs directly to `vlinsert`. So, the chart can now be thought of as:

```mermaid
graph LR
    Vector["Log Collector"] --> VLI1["vlinsert-1"]
    Vector --> VLI2["vlinsert-2"]
    
    subgraph "VictoriaLogs Cluster"
        VLI1 --> VLS1["vlstorage-1"]
        VLI1 --> VLS2["vlstorage-2"]
        VLI2 --> VLS1
        VLI2 --> VLS2
        
        VLS1 <--> VLQ1["vlselect-1"]
        VLS1 <--> VLQ2["vlselect-2"]
        VLS2 <--> VLQ1
        VLS2 <--> VLQ2
    end
    
    VLQ1 <--> Users["vmauth"]
    VLQ2 <--> Users
```

Note that `vmauth` can send requests to `vlinsert` as needed. The diagram above shows a common use case.

{{ include "chart.installSection" . }}

{{ include "chart.uninstallSection" . }}

{{ include "chart.helmDocs" . }}

## Parameters

The following tables lists the configurable parameters of the chart and their default values.

Change the values according to the need of the environment in ``victoria-logs-cluster/values.yaml`` file.

{{ template "chart.valuesTableHtml" . }}
